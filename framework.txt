// ====================== 1) room ======================
// 关联：session[*]、roommember[*]; 字段：name/state/capacity/created_at/room_id
public class Room {
    // --- US_2.1 玩家加入/退出；US_2.6 GM 分组 ---
    public boolean isFull(int currentMembers, int capacity) { return false; }
    public void open(Integer roomId) { }
    public void close(Integer roomId) { }
    public void setState(Integer roomId, RoomState state) { }

    // 玩家加入/退出房间（产生/删除 RoomMember）
    public RoomMember addMember(Integer roomId, Integer userId, OffsetDateTime joinedAt) { return null; }     // US_2.1
    public void removeMember(Integer roomId, Integer userId) { }                                              // US_2.1

    // 组队（无专门表，按房间进行临时编组）
    public Integer createTeam(Integer roomId, String teamName) { return null; }                               // US_2.1
    public void addMemberToTeam(Integer roomId, Integer teamId, Integer userId) { }                           // US_2.1
    public void assignTeamsByGM(Integer roomId, Map<Integer, List<Integer>> teamToUserIds) { }                // US_2.6

    // 团队共识行动
    public String recordTeamAction(Integer roomId, Integer teamId, String actionName, String notes) { return null; } // US_2.5
    public void confirmTeamAction(Integer roomId, Integer teamId, String proposalId, Integer confirmerUserId) { }     // US_2.5

    // 房间邀请 & 口令入房
    // 生成一个邀请（返回 inviteId），支持可选留言与过期时间
    public String inviteFriendToRoom(Integer inviterUserId,
                                     Integer inviteeUserId,
                                     Integer roomId,
                                     String message,
                                     OffsetDateTime expireAt) { return null; }        // US_2.4

    // 邀请被接受：受邀玩家入房并返回对应的 RoomMember 记录
    public RoomMember acceptRoomInvite(Integer inviteeUserId,
                                       String inviteId,
                                       OffsetDateTime joinedAt) { return null; }       // US_2.4

    // 受邀方拒绝；或邀请者/GM 撤回
    public void declineRoomInvite(Integer inviteeUserId, String inviteId) { }          // US_2.4
    public void revokeRoomInvite(Integer inviterUserId, String inviteId) { }           // US_2.4

    // 管理端/GM 查询当前房间有效邀请（用于 UI 展示或审计）
    public List<String> listActiveInvites(Integer roomId) { return null; }             // US_2.4

    // === 新增：口令/二维码入房（便于课堂扫码） ===
    // 生成临时入房口令（或二维码所携带的 joinCode）
    public String generateJoinCode(Integer roomId,
                                   Integer inviterUserId,
                                   Duration ttl) { return null; }                      // US_2.4

    // 用户凭口令加入指定房间（服务端需校验有效期/容量）
    public RoomMember joinRoomByCode(Integer userId,
                                     String joinCode,
                                     OffsetDateTime joinedAt) { return null; }         // US_2.4

}

// ====================== 2) session ======================
// 关联：room[1]、character[*]、combatlog[*]、analyticsevent[*]; 字段：status/created_at/session_id
public class Session {
    // 生命周期控制
    public void start(Integer sessionId, Integer gmUserId) { }                                                // US_4.1, US_4.7
    public void pause(Integer sessionId, Integer gmUserId) { }
    public void resume(Integer sessionId, Integer gmUserId) { }
    public void finish(Integer sessionId, Integer gmUserId) { }

    // 回合与超时
    public void endTurn(Integer sessionId, Integer actorCharId) { }                                           // US_1.4
    public void endTurnOnTimeout(Integer sessionId, Integer actorCharId, Duration maxDuration) { }            // US_1.4

    // 存档/读档
    public String saveSnapshot(Integer sessionId, Integer gmUserId, String note) { return null; }             // US_4.2
    public void loadSnapshot(String snapshotId, Integer gmUserId) { }                                         // US_4.3

    // 规则与难度
    public void applyDefaultRules(Integer sessionId) { }                                                       // US_4.7
    public void setDifficulty(Integer sessionId, String level, Map<String, Object> options) { }               // US_4.8

    // 监控概览（各组进度、当前轮到谁等）
    public Map<String, Object> getLiveOverview(Integer sessionId) { return null; }                            // US_4.1
    public Map<Integer, Object> computeGroupProgress(Integer sessionId) { return null; }                      // US_4.1
}

// ====================== 3) user ======================
// 关联：roommember[*]、character[*]、subscription[*]、friendship[*]
public class User {
    // 基础角色/权限
    public boolean hasRole(Integer userId, UserRole role) { return false; }                                   // US_3.x, US_5.5
    public void changeRole(Integer operatorAdminId, Integer targetUserId, UserRole newRole) { }               // US_5.5

    // 登录相关（域内校验）
    public boolean checkPassword(String rawPassword, String passwordHash) { return false; }                   // US_3.1-3.3

    // 加入房间 & 选择角色
    public RoomMember joinRoom(Integer userId, Integer roomId, OffsetDateTime joinedAt) { return null; }      // US_2.1
    public Integer selectCharacter(Integer userId, Integer sessionId,
                                   CharacterRole role, String nameOrDescription) { return null; }             // US_1.1

    // === 从用户侧发起好友相关操作（委托 Friendship 领域对象/服务） ===
    public void requestFriend(Integer userId, Integer targetUserId, String message) { }                       // US_2.3
    public void respondFriendRequest(Integer userId, Integer requesterUserId, boolean accept) { }             // US_2.3
}

// ====================== 4) character ======================
// 关联：session[1]、user[0..1]、combatlog[*]
public class Character {
    // 自定义/查看状态
    public void rename(Integer charId, String displayName) { }                                                // US_1.1, US_4.6
    public void setRole(Integer charId, CharacterRole role) { }                                               // US_1.1, US_4.6
    public void updateStats(Integer charId, Integer hp, Integer mp, Integer ap, Integer speed) { }            // US_1.6, US_4.6
    public int getHp(Integer charId) { return 0; }                                                             // US_1.6

    // 战斗动作
    public String performAction(Integer sessionId, Integer actorCharId, Integer targetCharId,
                                CombatAction action, int diceCount, int sides, int modifier) { return null; } // US_1.2, US_1.7, US_1.3
    public String assistTeammate(Integer sessionId, Integer actorCharId, Integer allyCharId,
                                 String assistType, int diceCount, int sides, int modifier) { return null; }  // US_1.8
    public int rollDice(int diceCount, int sides, int modifier) { return 0; }                                  // US_1.7
}

// ====================== 5) plan ======================
// 订阅计划（管理员在后台管理）
public class Plan {
    public Integer create(String name, BigDecimal monthlyCost, Integer maxUsers) { return null; }              // US_5.7
    public void update(Integer planId, String name, BigDecimal monthlyCost, Integer maxUsers) { }              // US_5.7
    public BigDecimal estimateMonthlyCost(Integer planId, int usersCount) { return null; }                     // US_5.1
}

// ====================== 6) subscription ======================
// 关联：user[1], plan[1]；字段：status/started_at/ended_at
public class Subscription {
    public Integer subscribe(Integer userId, Integer planId, OffsetDateTime startAt) { return null; }          // US_5.7
    public void cancel(Integer subId, OffsetDateTime endAt) { }                                                // US_5.7
    public void pause(Integer subId) { }                                                                        // US_5.7
    public boolean isActive(Integer subId, OffsetDateTime at) { return false; }                                 // US_5.1
    public void changePlan(Integer subId, Integer newPlanId) { }                                                // US_5.7
}

// ====================== 7) roommember ======================
// 房间-用户的关联，含 joined_at
public class RoomMember {
    public static RoomMember of(Integer roomId, Integer userId, OffsetDateTime joinedAt) { return null; }      // US_2.1
    public void leave(Integer roomId, Integer userId) { }                                                       // US_2.1
    public boolean isMemberOf(Integer roomId, Integer userId) { return false; }                                 // US_2.1
}

// ====================== 8) friendship ======================
// 用户-用户社交关系
public class Friendship {
    public void sendRequest(Integer userId, Integer targetUserId) { }                                          // 衍生于社交需求
    public void accept(Integer userId, Integer targetUserId) { }
    public void block(Integer userId, Integer targetUserId) { }
    public boolean isBetween(Integer userId, Integer friendId) { return false; }
 
    // 好友管理（加/受/拒/删/列）
    // ===拒绝好友请求 / 撤回自己发出的请求 ===
    public void decline(Integer userId, Integer requesterUserId) { }                   // US_2.3
    public void cancelRequest(Integer requesterUserId, Integer targetUserId) { }       // US_2.3

    // === 删除已建立的好友关系 / 解除屏蔽 ===
    public void remove(Integer userId, Integer friendUserId) { }                       // US_2.3
    public void unblock(Integer userId, Integer blockedUserId) { }                     // US_2.3

    // === 查询 ===
    public List<Integer> listFriends(Integer userId) { return null; }                  // US_2.3
    public List<Integer> listPendingRequests(Integer userId) { return null; }          // US_2.3
    public FriendshipStatus getStatus(Integer userId, Integer otherUserId) { return null; } // US_2.3
}

// ====================== 9) analyticsevent ======================
// 行为/监控事件，用于 KPI、审计、告警
public class AnalyticsEvent {
    public static AnalyticsEvent of(Integer sessionId, Integer userId, AnalyticsEventType type,
                                    OffsetDateTime timestamp, String metadataJson) { return null; }

    // KPI & 监控
    public static Map<String, Object> computeKPIs(Integer roomId, Integer sessionId,
                                                  OffsetDateTime from, OffsetDateTime to) { return null; }    // US_5.2, US_5.3
    public static List<AnalyticsEvent> getAuditLog(OffsetDateTime from, OffsetDateTime to,
                                                   AnalyticsEventType filter) { return null; }                // US_5.5
    public static boolean isAuthError(AnalyticsEvent e) { return false; }                                     // US_5.6
    public static boolean isLowEngagement(Integer roomId, OffsetDateTime from, OffsetDateTime to,
                                          int lowEngagementMinutes, int missedSessions) { return false; }     // US_5.8

    // === 记录社交/邀请关键动作（可选，便于仪表盘与审计） ===
    public static void recordFriendEvent(Integer actorUserId,
                                         Integer targetUserId,
                                         String action,                                                       // "request"|"accept"|"decline"|"remove"|"block"|"unblock"
                                         OffsetDateTime ts) { }                                               // US_2.3

    public static void recordRoomInviteEvent(Integer actorUserId,
                                             Integer roomId,
                                             String action,                                                   // "invite"|"revoke"|"accept"|"decline"|"joinByCode"
                                             String refIdOrCode,                                              // inviteId 或 joinCode（用于审计追踪）
                                             OffsetDateTime ts) { }                                           // US_2.4
   
}

// ====================== 10) combatlog ======================
// 战斗日志：回放、反馈可视化
public class CombatLog {
    public static CombatLog create(Integer sessionId, Integer turnIndex, Integer actorCharId,
                                   CombatAction action, Integer targetCharId, String resultText) { return null; } // US_1.3, US_1.5
    public static List<CombatLog> listRecent(Integer sessionId, int limit, int offset) { return null; }           // US_1.5
    public String formatForDisplay() { return null; }                                                              // US_1.3
}
